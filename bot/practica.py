import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
def get_exchange_rate(base: str, target='RUB'):
    url = f"https://api.exchangerate-api.com/v4/latest/{base}"
    try:
        response = requests.get(url)
        data = response.json()
        return data['rates'].get(target)
    except:
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ USD —á–µ—Ä–µ–∑ CoinGecko
def get_crypto_rate(crypto_id):
    try:
        url = f"https://api.coingecko.com/api/v3/simple/price?ids={crypto_id}&vs_currencies=usd"
        response = requests.get(url)
        data = response.json()
        return data[crypto_id]['usd']
    except:
        return None

# 10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def get_btc_rate(): return get_crypto_rate('bitcoin')
def get_eth_rate(): return get_crypto_rate('ethereum')
def get_bnb_rate(): return get_crypto_rate('binancecoin')
def get_xrp_rate(): return get_crypto_rate('ripple')
def get_sol_rate(): return get_crypto_rate('solana')
def get_ada_rate(): return get_crypto_rate('cardano')
def get_doge_rate(): return get_crypto_rate('dogecoin')
def get_dot_rate(): return get_crypto_rate('polkadot')
def get_trx_rate(): return get_crypto_rate('tron')
def get_link_rate(): return get_crypto_rate('chainlink')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data='currency')],
        [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='crypto')],
        [InlineKeyboardButton("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–æ—Ä", callback_data='converter')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ü–æ–¥–º–µ–Ω—é –≤–∞–ª—é—Ç
def get_currency_menu():
    keyboard = [
        [InlineKeyboardButton("USD ‚Üí RUB", callback_data='usd')],
        [InlineKeyboardButton("EUR ‚Üí RUB", callback_data='eur')],
        [InlineKeyboardButton("GBP ‚Üí RUB", callback_data='gbp')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ü–æ–¥–º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def get_crypto_menu():
    keyboard = [
        [InlineKeyboardButton("BTC", callback_data='btc'), InlineKeyboardButton("ETH", callback_data='eth')],
        [InlineKeyboardButton("BNB", callback_data='bnb'), InlineKeyboardButton("XRP", callback_data='xrp')],
        [InlineKeyboardButton("SOL", callback_data='sol'), InlineKeyboardButton("ADA", callback_data='ada')],
        [InlineKeyboardButton("DOGE", callback_data='doge'), InlineKeyboardButton("DOT", callback_data='dot')],
        [InlineKeyboardButton("TRX", callback_data='trx'), InlineKeyboardButton("LINK", callback_data='link')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ú–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
def get_converter_menu():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main')]])

# /start –∫–æ–º–∞–Ω–¥–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    name = user.first_name if user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await update.message.reply_text(welcome_text, reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data == 'currency':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=get_currency_menu())

    elif data == 'crypto':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=get_crypto_menu())

    elif data == 'main':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_menu())

    elif data == 'converter':
        user_states[user_id] = 'awaiting_conversion'
        await query.edit_message_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`100 USD to RUB` \n (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã USD, EUR, RUB, TJS, UZB, KZT, KGS, CNY, GBP)",
            reply_markup=get_converter_menu(),
            parse_mode='Markdown'
        )

    # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
    elif data in ['usd', 'eur', 'gbp']:
        base = data.upper()
        rate = get_exchange_rate(base)
        msg = f"üíµ 1 {base} = {rate} RUB" if rate else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {base}"
        await query.edit_message_text(msg, reply_markup=get_currency_menu())

    # –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    crypto_map = {
        'btc': get_btc_rate,
        'eth': get_eth_rate,
        'bnb': get_bnb_rate,
        'xrp': get_xrp_rate,
        'sol': get_sol_rate,
        'ada': get_ada_rate,
        'doge': get_doge_rate,
        'dot': get_dot_rate,
        'trx': get_trx_rate,
        'link': get_link_rate,
    }

    if data in crypto_map:
        rate = crypto_map[data]()
        msg = f"üí∏ 1 {data.upper()} = {rate} USD" if rate else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {data.upper()}"
        await query.edit_message_text(msg, reply_markup=get_crypto_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_states.get(user_id) == 'awaiting_conversion':
        text = update.message.text.strip().upper()
        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É, –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É –∏ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
            parts = text.split()
            amount = float(parts[0])
            base = parts[1]
            target = parts[3] if parts[2] == 'TO' else None

            if not target:
                raise ValueError

            rate = get_exchange_rate(base, target)
            if rate:
                converted = round(amount * rate, 2)
                await update.message.reply_text(f"üîÅ {amount} {base} = {converted} {target}")
                user_states[user_id] = None  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª–µ–µ:",
                    reply_markup=get_main_menu()
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è —ç—Ç–∏—Ö –≤–∞–ª—é—Ç.")
        except:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n`100 USD to RUB`", parse_mode='Markdown')

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –æ—Ç–≤–µ—á–∞–µ–º –æ—à–∏–±–∫–æ–π
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É.")

# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token("7970175320:AAH7qIeyad1JzplEab_WytyLgrPflNcvtL0").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()
